{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "CheckIPLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/AWS-dynamic-DNS/dev/1483366066878-2017-01-02T14:07:46.878Z/AWS-dynamic-DNS.zip"
        },
        "FunctionName": "AWS-dynamic-DNS-dev-checkIP",
        "Handler": "handler.checkIP",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "lambdaR53role",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ZONE_NAME": "tarbard.org.",
            "DNS_ADDRESS": "home.tarbard.org.",
            "DNS_TTL": 300
          }
        }
      },
      "DependsOn": [
        "lambdaR53role"
      ]
    },
    "CheckIPLambdaVersionVM0CKV6ZybulgMohrRWXVoE51P37UdYFzrWH6T2C0k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CheckIPLambdaFunction"
        },
        "CodeSha256": "VM0CKV6ZybulgMohrRWXVoE51P37Ud/YFzrWH6T2C0k="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-AWS-dynamic-DNS"
      }
    },
    "ApiGatewayResourceCheckip": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "checkIP",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCheckipGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCheckip"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CheckIPLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{ \"sourceip\" : \"$context.identity.sourceIp\" }",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    #define( $loop )\n      {\n      #foreach($key in $map.keySet())\n          \"$util.escapeJavaScript($key)\":\n            \"$util.escapeJavaScript($map.get($key))\"\n            #if( $foreach.hasNext ) , #end\n      #end\n      }\n    #end\n\n    {\n      \"body\": $body,\n      \"method\": \"$context.httpMethod\",\n      \"principalId\": \"$context.authorizer.principalId\",\n      \"stage\": \"$context.stage\",\n\n      #set( $map = $input.params().header )\n      \"headers\": $loop,\n\n      #set( $map = $input.params().querystring )\n      \"query\": $loop,\n\n      #set( $map = $input.params().path )\n      \"path\": $loop,\n\n      #set( $map = $context.identity )\n      \"identity\": $loop,\n\n      #set( $map = $stageVariables )\n      \"stageVariables\": $loop\n    }\n  ",
            "text/xhtml": "{ \"sourceip\" : \"$context.identity.sourceIp\" }"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": ".*\\[400\\].*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": ".*\\[401\\].*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": ".*\\[403\\].*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": ".*\\[404\\].*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": ".*\\[422\\].*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": ".*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\]).*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": ".*\\[502\\].*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": ".*\\[504\\].*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      }
    },
    "ApiGatewayDeployment1483366066888": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodCheckipGet"
      ]
    },
    "ApiGatewayApiKey1": {
      "Type": "AWS::ApiGateway::ApiKey",
      "Properties": {
        "Enabled": true,
        "Name": "DNSKey",
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          }
        ]
      },
      "DependsOn": "ApiGatewayDeployment1483366066888"
    },
    "CheckIPLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CheckIPLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "lambdaR53role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/checkIP/",
        "RoleName": "LambdaR53Role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LambdaRoute53ControlPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:GetHostedZone",
                    "route53:ListResourceRecordSets",
                    "route53:ChangeResourceRecordSets"
                  ],
                  "Resource": "arn:aws:route53:::hostedzone/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ListHostedZonesByName"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "CheckIPLambdaFunctionArn": {
      "Description": "Lambda function info",
      "Value": {
        "Fn::GetAtt": [
          "CheckIPLambdaFunction",
          "Arn"
        ]
      }
    },
    "CheckIPLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CheckIPLambdaVersionVM0CKV6ZybulgMohrRWXVoE51P37UdYFzrWH6T2C0k"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.eu-west-1.amazonaws.com/dev"
          ]
        ]
      }
    }
  }
}